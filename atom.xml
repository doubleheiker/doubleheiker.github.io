<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>asKylin</title>
  
  <subtitle>The more a man learns, the more he knows his ignorance.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://askylin.top/"/>
  <updated>2019-02-11T09:28:37.709Z</updated>
  <id>http://askylin.top/</id>
  
  <author>
    <name>asKylin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Deep Learning</title>
    <link href="http://askylin.top/2019/02/10/DeepLearning/"/>
    <id>http://askylin.top/2019/02/10/DeepLearning/</id>
    <published>2019-02-10T14:02:00.000Z</published>
    <updated>2019-02-11T09:28:37.709Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="Perceptrons"><a href="#Perceptrons" class="headerlink" title="Perceptrons"></a>Perceptrons</h1><p>输入x1, x2…是二进制输入，产生一个二进制输出。<br>感知器可以用作一种决策器。<br>感知器可以当作NAND门。<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">output= 0 if w⋅x+b≤0</span><br><span class="line">1 if w⋅x+b&gt;0</span><br></pre></td></tr></table></figure></p><p>权重或者偏差（阈值）轻微的变动会引起结果的很大的变化。<br>假设我们采用感知器（Perceptrons）网络中的所有权重和偏差，并将它们乘以正常数c，c&gt; 0。神经网络的行为不会更改。</p><hr><h1 id="Sigmoid-neurons"><a href="#Sigmoid-neurons" class="headerlink" title="Sigmoid neurons"></a>Sigmoid neurons</h1><p>输入x1, x2…在0~1之间，产生一个在0~1之间的输出。<br>sigmoid函数：σ(z)≡1/1+e^(−z), z ≡ <strong>wx</strong> + b。<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">output = 1/(1+exp(−∑jwjxj−b))</span><br><span class="line">Δoutput ≈ (∑j∂output/∂wj)Δwj+(∂output/∂b)Δb</span><br></pre></td></tr></table></figure></p><p>权重或者偏差（阈值）轻微的变动会引起结果较小的变化。<br>假设我们采用Sigmoid神经元网络中的所有权重和偏差，并将它们乘以正常数c，c&gt; 0。当c→∞时，神经网络的行为就是感知器网络的行为。</p><hr><h1 id="The-architecture-of-neural-networks"><a href="#The-architecture-of-neural-networks" class="headerlink" title="The architecture of neural networks"></a>The architecture of neural networks</h1><p>输入层：输入神经元<br>输出层：输出神经元<br>隐层：隐层神经元</p><hr><h1 id="留坑待填"><a href="#留坑待填" class="headerlink" title="留坑待填"></a>留坑待填</h1>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;深度学习的初步学习&lt;/center&gt;
    
    </summary>
    
      <category term="AI" scheme="http://askylin.top/categories/AI/"/>
    
    
      <category term="AI" scheme="http://askylin.top/tags/AI/"/>
    
      <category term="Deep Learning" scheme="http://askylin.top/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Install Debian 64-bit on computer</title>
    <link href="http://askylin.top/2019/01/31/Debian/"/>
    <id>http://askylin.top/2019/01/31/Debian/</id>
    <published>2019-01-31T11:18:35.000Z</published>
    <updated>2019-02-11T08:46:50.469Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="留坑待填"><a href="#留坑待填" class="headerlink" title="留坑待填"></a>留坑待填</h1>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;双系统安装64位Debian系统&lt;/center&gt;
    
    </summary>
    
      <category term="SystemInstall" scheme="http://askylin.top/categories/SystemInstall/"/>
    
    
      <category term="SystemInstall" scheme="http://askylin.top/tags/SystemInstall/"/>
    
  </entry>
  
  <entry>
    <title>5 LinkListFun()</title>
    <link href="http://askylin.top/2018/10/14/LinklistFun/"/>
    <id>http://askylin.top/2018/10/14/LinklistFun/</id>
    <published>2018-10-14T11:10:27.000Z</published>
    <updated>2019-02-10T15:33:11.590Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="Reverse-LinkList"><a href="#Reverse-LinkList" class="headerlink" title="Reverse LinkList"></a>Reverse LinkList</h1><p>描述：反转一个单链表</p><ol><li><p>迭代</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***** Definition for linklist *****/</span></span><br><span class="line"><span class="comment">/* typedef struct LNode&#123;</span></span><br><span class="line"><span class="comment">Elemtype data;</span></span><br><span class="line"><span class="comment">struct LNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;LNode *linklist</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LNode <span class="title">reverseList</span><span class="params">(linklist head)</span> </span>&#123;</span><br><span class="line">        linklist newhead=null;</span><br><span class="line">        linklist now;</span><br><span class="line">        <span class="keyword">while</span>(head!=null)&#123;</span><br><span class="line">            now=head;         <span class="comment">//取头</span></span><br><span class="line">            head=head.next;   <span class="comment">//更新原链头</span></span><br><span class="line">            now.next=newhead; <span class="comment">//插入新链</span></span><br><span class="line">            newhead=now;      <span class="comment">//更新新链头</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newhead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>递归</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LNode <span class="title">reverseList</span><span class="params">(linklist head)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(head==null||head.next==null)<span class="keyword">return</span> head;</span><br><span class="line">         LNode newhead=reverseList(head.next);</span><br><span class="line">         head.next.next=head;</span><br><span class="line">         head.next=null;</span><br><span class="line">         <span class="keyword">return</span> newhead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="LinkedList-Cycle"><a href="#LinkedList-Cycle" class="headerlink" title="LinkedList Cycle"></a>LinkedList Cycle</h1><p>描述：判断一个链表是否有环</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 时间复杂度O(n) 空间复杂度O(1) </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span> </span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123; </span><br><span class="line"><span class="comment">// 设计两个指针，一快一慢，快指针与慢指针相遇则有环。</span></span><br><span class="line">ListNode *slow = head, *fast = head; </span><br><span class="line"><span class="keyword">while</span> (fast &amp;&amp; fast-&gt;next) &#123; </span><br><span class="line">slow = slow-&gt;next; </span><br><span class="line">fast = fast-&gt;next-&gt;next; </span><br><span class="line"><span class="keyword">if</span> (slow == fast) <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="Merge-Two-Sorted-Lists"><a href="#Merge-Two-Sorted-Lists" class="headerlink" title="Merge Two Sorted Lists"></a>Merge Two Sorted Lists</h1><p>描述：将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 时间复杂度O(min(m,n)) 空间复杂度O(1) </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span> </span><br><span class="line"><span class="keyword">public</span>: <span class="function">ListNode *<span class="title">mergeTwoLists</span><span class="params">(ListNode *l1, ListNode *l2)</span> </span>&#123; </span><br><span class="line"><span class="keyword">if</span> (l1 == <span class="literal">nullptr</span>) <span class="keyword">return</span> l2; </span><br><span class="line"><span class="keyword">if</span> (l2 == <span class="literal">nullptr</span>) <span class="keyword">return</span> l1; </span><br><span class="line"><span class="function">ListNode <span class="title">dummy</span><span class="params">(<span class="number">-1</span>)</span></span>; <span class="comment">//头结点</span></span><br><span class="line">ListNode *p = &amp;dummy; </span><br><span class="line"><span class="keyword">for</span> (; l1 != <span class="literal">nullptr</span> &amp;&amp; l2 != <span class="literal">nullptr</span>; p = p-&gt;next) &#123; </span><br><span class="line"><span class="keyword">if</span> (l1-&gt;val &gt; l2-&gt;val) &#123; </span><br><span class="line">p-&gt;next = l2; </span><br><span class="line">l2 = l2-&gt;next; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123; </span><br><span class="line">p-&gt;next = l1; </span><br><span class="line">l1 = l1-&gt;next; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">p-&gt;next = l1 != <span class="literal">nullptr</span> ? l1 : l2; </span><br><span class="line"><span class="keyword">return</span> dummy.next; </span><br><span class="line">&#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="Remove-Nth-Node-From-End-of-List"><a href="#Remove-Nth-Node-From-End-of-List" class="headerlink" title="Remove Nth Node From End of List"></a>Remove Nth Node From End of List</h1><p>描述：给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设两个指针p,q，让q先走n步，然后p,q一起走，直到q走到尾结点，删除p-&gt;next即可</span></span><br><span class="line"><span class="comment">// 时间复杂度O(n) 空间复杂度O(1) </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span> </span><br><span class="line"><span class="keyword">public</span>: <span class="function">ListNode *<span class="title">removeNthFromEnd</span><span class="params">(ListNode *head, <span class="keyword">int</span> n)</span> </span>&#123; </span><br><span class="line">ListNode dummy&#123;<span class="number">-1</span>, head&#125;; <span class="comment">//头结点</span></span><br><span class="line">ListNode *p = &amp;dummy, *q = &amp;dummy; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="comment">// q先走n步 </span></span><br><span class="line">q = q-&gt;next; </span><br><span class="line"><span class="keyword">while</span>(q-&gt;next) &#123; <span class="comment">// 一起走</span></span><br><span class="line">p = p-&gt;next; </span><br><span class="line">q = q-&gt;next; </span><br><span class="line">&#125; </span><br><span class="line">ListNode *tmp = p-&gt;next; </span><br><span class="line">p-&gt;next = p-&gt;next-&gt;next; </span><br><span class="line"><span class="keyword">delete</span> tmp; <span class="keyword">return</span> dummy.next; </span><br><span class="line">&#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="MiddleNode-of-List"><a href="#MiddleNode-of-List" class="headerlink" title="MiddleNode of List"></a>MiddleNode of List</h1><p>描述：给定一个带有头结点head的非空单链表，返回链表的中间结点。如果，有两个中间结点，则返回第二个中间节点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同样使用快慢两个指针，当用慢指针slow遍历列表时，让另一个指针fast的速度是slow的二倍，则当快指针到结尾时，slow指针位于中间。</span></span><br><span class="line"><span class="comment">//初始位置都为head时，当fast指向最终的null时，slow也就达到了要求。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">middleNode</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">ListNode slow = head, fast = head;</span><br><span class="line"><span class="keyword">while</span>((fast != null) &amp;&amp; (fast.next != null)) &#123;</span><br><span class="line">slow = slow.next;</span><br><span class="line">fast = fast.next.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;5个常见的单链表操作&lt;/center&gt;
    
    </summary>
    
      <category term="DataStructure" scheme="http://askylin.top/categories/DataStructure/"/>
    
    
      <category term="DataStructure" scheme="http://askylin.top/tags/DataStructure/"/>
    
      <category term="c++" scheme="http://askylin.top/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Palindrome</title>
    <link href="http://askylin.top/2018/10/14/List/"/>
    <id>http://askylin.top/2018/10/14/List/</id>
    <published>2018-10-14T01:38:47.000Z</published>
    <updated>2019-02-11T01:42:51.326Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>在学习链表时，遇到的一个有意思的问题，记录下思路和算法。</p></blockquote><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol><li>使用快慢两个指针找到链表中点，快指针每次移动两个结点，慢指针每次移动一个结点。<ul><li>如果结点是奇数，中点位置不需要矫正</li><li>如果结点是偶数，使慢指针前进一个结点指向下中位数</li></ul></li><li>在慢指针移动的时候，同时修改其next指针，使链表前半部分反序。</li><li>最后比较中点两侧的链表是否相等。</li></ol><p>时间复杂度：O(n)<br>空间复杂度：O(n)</p><hr><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***** Definition for linklist *****/</span></span><br><span class="line"><span class="comment">/* typedef struct LNode&#123;</span></span><br><span class="line"><span class="comment">Elemtype data;</span></span><br><span class="line"><span class="comment">struct LNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;LNode *linklist</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPalindorme</span><span class="params">(LNode head)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (head == null || head-&gt;next == null) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">LNode prev = null;</span><br><span class="line">LNode slow = head;</span><br><span class="line">LNode fast = head;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现链表前半部分反序排列</span></span><br><span class="line"><span class="keyword">while</span> (fast != null &amp;&amp; fast-&gt;next != null) &#123;</span><br><span class="line">fast = fast-&gt;next-&gt;next;</span><br><span class="line">LNode next = slow-&gt;next;</span><br><span class="line">slow-&gt;next = prev;</span><br><span class="line">prev = slow;</span><br><span class="line">slow = next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据fast指针判断链表奇偶</span></span><br><span class="line"><span class="keyword">if</span> (fast ！= null) &#123;</span><br><span class="line">slow = slow-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较链表前半段和后半段是否相同</span></span><br><span class="line"><span class="keyword">while</span> (slow != null) &#123;</span><br><span class="line"><span class="keyword">if</span> (slow-&gt;data != prev-&gt;data) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">slow = slow-&gt;next;</span><br><span class="line">prev = prev-&gt;next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;单链表判断回文串&lt;/center&gt;
    
    </summary>
    
      <category term="DataStructure" scheme="http://askylin.top/categories/DataStructure/"/>
    
    
      <category term="DataStructure" scheme="http://askylin.top/tags/DataStructure/"/>
    
      <category term="c++" scheme="http://askylin.top/tags/c/"/>
    
      <category term="c" scheme="http://askylin.top/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>DataStructure</title>
    <link href="http://askylin.top/2018/09/26/DataStructure/"/>
    <id>http://askylin.top/2018/09/26/DataStructure/</id>
    <published>2018-09-26T14:49:27.000Z</published>
    <updated>2019-02-11T06:06:50.004Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><h2 id="基本概念和术语"><a href="#基本概念和术语" class="headerlink" title="基本概念和术语"></a>基本概念和术语</h2><p><strong>数据</strong>：所有能输入到计算机中并被计算机程序处理的符号总称<br><strong>数据元素</strong>：数据的基本单位，一个数据元素可由若干个<strong>数据项</strong>组成<br><strong>数据项</strong>：是数据的不可分割的最小单位<br><strong>数据对象</strong>：是性质相同的数据元素的集合，是数据的一个子集<br><strong>数据结构</strong>：是相互之间存在的一种或多种特定关系的数据元素的集合（简单解释）</p><p>根据数据元素之间关系的不同特性，通常有下列4种基本结构：<br>1）集合<br>2）线性结构<br>3）树形结构<br>4）图状结构或网状结构</p><p>数据结构的形式定义为：数据结构是一个二元组<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Data_Structure = (D,S)</span><br></pre></td></tr></table></figure></p><p>其中：D是数据元素的有限集，S是D上关系的有限集。</p><p><strong>数据的储存结构</strong><br>顺序、链接、索引、散列</p><p><strong>抽象数据类型（ADT）</strong><br>和数据结构的形式定义相对应，抽象数据类型可用以下三元组表示<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(D、S、P)</span><br></pre></td></tr></table></figure></p><p>其中，D是数据对象，S是D上的关系集，P是对D的基本操作机集。<br>以如下格式定义抽象数据类型：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ADT抽象数据类型名&#123;</span><br><span class="line">数据对象：&lt;数据对象的定义&gt;</span><br><span class="line">数据关系：&lt;数据关系的定义&gt;</span><br><span class="line">基本操作：&lt;基本操作的定义&gt;</span><br><span class="line">&#125;ADT抽象数据类型名</span><br></pre></td></tr></table></figure></p><p>其中，数据对象和数据关系的定义用伪代码描述，基本操作的定义格式为<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">基本操作名(参数表)</span><br><span class="line">初始条件：&lt;初始条件描述&gt;</span><br><span class="line">操作结果：&lt;操作结果描述&gt;</span><br></pre></td></tr></table></figure></p><p>基本操作有两种参数：<br><strong>赋值参数只为操作提供输入值</strong><br><strong>引用参数以&amp;打头，出可提供输入值外，还将返回操作结果</strong></p><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a><strong>时间复杂度</strong></h3><p>一般情况下，算法中基本操作重复执行的次数是问题规模n的某个函数f(n)，算法的时间度量记作<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(n) = O(f(n))</span><br></pre></td></tr></table></figure></p><p><strong>时间复杂度分析</strong><br>1）只关注循环执行次数最多的一段代码<br>2）加法法则：总复杂度等于量级最大的那一段代码的复杂度。例如：<br>若 T1(n) = O(f(n)), T2(n) = O(g(n))<br>则 T(n) = T1(n) + T2(n) = max{O(f(n)), O(g(n))} = O(max{f(n),g(n)})<br>3）乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积。例如：<br>若 T1(n) = O(f(n)), T2(n) = O(g(n))<br>则 T(n) = T1(n) x T2(n) = O(f(n)) x O(g(n)) = O(f(n) xg(n))<br><strong>复杂度量级（按数量级递增）</strong></p><table><thead><tr><th>多项式量级</th><th>非多项式量级</th></tr></thead><tbody><tr><td>常量阶O(1)</td><td>指数阶O(2^n)</td></tr><tr><td>对数阶O(logn)</td><td>阶乘阶O(n!)</td></tr><tr><td>线性阶O(n)</td><td></td></tr><tr><td>线性对数阶O(nlogn)</td><td></td></tr><tr><td>平方阶O(n^2)…k次方阶O(n^k)</td><td></td></tr></tbody></table><p><strong>当O(m+n)、O(mxn)时</strong><br>加法法则：T1(m) + T2(n) = T(n) = O(f(n) + g(n))<br>乘法法则不变</p><h4 id="进阶：四个复杂度分析"><a href="#进阶：四个复杂度分析" class="headerlink" title="进阶：四个复杂度分析"></a>进阶：四个复杂度分析</h4><p>最坏情况时间复杂度：代码在最坏的情况下执行的时间复杂度<br>最好情况时间复杂度：代码在最理想的情况下执行的时间复杂度<br><strong>平均时间复杂度</strong>：用代码在所有情况下执行的次数的加权平均值表示<br><strong>均摊时间复杂度</strong>：在代码执行的所有复杂度情况中绝大多数是低级别的复杂度，个别情况是高级别复杂度，且低级别的复杂度与高级别的复杂度发生具有规律性时，可以将个别高级别的复杂度均摊到低级别的复杂度上。基本上均摊结果等于低级别的时间复杂度。<br><em>平均时间复杂度举例</em><br>    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//n表示数组array长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[] <span class="built_in">array</span>,<span class="keyword">int</span> n,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> pos = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">array</span>[i]==x)&#123;</span><br><span class="line">pos = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>假设要查找的x在数组中与不在数组中的概率都为1/2，另外，要查找的数据出现在0-n-1这n个位置的概率都一样，即1/n，则该例的平均时间复杂度计算方式为<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1x1/2n + 2x1/2n + 3x1/2n + ... + nx1/2n +nx1/2</span><br><span class="line">= (3n+1)/4</span><br></pre></td></tr></table></figure></p><p>由此可见该代码的加权平均时间复杂度为O(n)<br><em>均摊时间复杂度举例</em><br>    <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//array表示一个长度为n的数组</span></span><br><span class="line"><span class="comment">//代码中的array.length就等于n</span></span><br><span class="line"><span class="keyword">int</span>[] <span class="built_in">array</span> = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">int</span> count <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(count == <span class="built_in">array</span>.length)&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="built_in">array</span>.length;i++)&#123;</span><br><span class="line">sum = sum + <span class="built_in">array</span>[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">array</span>[<span class="number">0</span>] = sum;</span><br><span class="line">count = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">array</span>[count] = val;</span><br><span class="line">++count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在最理想的情况下，数组内有空闲空间，所以最好情况时间复杂度为O(1)，数组长度为n，那么更具数组插入的位置的不同，我们可以分为n种情况；最坏的情况下，数组中没有空闲空间，需要先做一次数组的遍历求和，然后将数组插入，所以最坏情况时间复杂度为O(n)。所以总共有n+1种情况，且发生概率一样，都是1/(n+1)。那么平均时间复杂度的计算方法为<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1x1/(n+1) + 1X1/(n+1) + ... + 1x1/(n+1) + nx1/(n+1)</span><br><span class="line">= O(1)</span><br></pre></td></tr></table></figure></p><p>我们可以发现find()函数和insert()函数有很大的差别，find()函数在极端情况下复杂度才为O(1),但insert()函数在大部分情况下复杂度都是O(1)，而且O(1)的插入和O(n)的插入，出现频率是非常有规律的，而且有一定的时序关系，一般都是一个O(n)插入之后，紧跟着n-1个O(1)的插入操作，循环往复。针对如此场景，上述分析的方法被称为：摊还分析法；通过摊还分析法得到的时间复杂度就是均摊时间复杂度。我么可以发现每一次O(n)的插入都会伴随n-1次的O(1)的插入，所以把耗时多的操作均摊到接下来n-1次耗时少的操作上，这就是均摊分析的大致思路</p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a><strong>空间复杂度</strong></h3><p>类似于时间复杂度，空间复杂度作为算法所需存储空间的度量，记作<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S(n) = O(f(n))</span><br></pre></td></tr></table></figure></p><h1 id="留坑待填"><a href="#留坑待填" class="headerlink" title="留坑待填"></a>留坑待填</h1>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;数据结构C语言版每章总结&lt;/center&gt;
    
    </summary>
    
      <category term="DataStructure" scheme="http://askylin.top/categories/DataStructure/"/>
    
    
      <category term="DataStructure" scheme="http://askylin.top/tags/DataStructure/"/>
    
  </entry>
  
  <entry>
    <title>Pwn</title>
    <link href="http://askylin.top/2018/09/12/pwn/"/>
    <id>http://askylin.top/2018/09/12/pwn/</id>
    <published>2018-09-12T13:26:33.000Z</published>
    <updated>2019-02-11T01:48:11.687Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="Basic-Knowledge"><a href="#Basic-Knowledge" class="headerlink" title="Basic Knowledge"></a>Basic Knowledge</h1><p>·Reverse Engineering<br>·Exploit<br>·x86 Assembly</p><p><strong>·Reverse Engineering</strong><br>Binary to Source code<br>通过逆向工程来发现漏洞<br>静态分析（不运行程序来分析代码）：<br>    工具：<br>        IDA Pro<br>        objdump命令<br>动态分析（运行程序来分析代码）：<br>    工具：<br>        strace命令（跟踪系统函数调用）usage: strace fileaddress<br>        Itrace命令（跟踪所有库调用, library函数）usage:ltrace fileaddress</p><p><strong>·Exploit</strong><br>Vulnerability to Control flow<br>利用漏洞攻击取得程序控制权<br>即pwn<br>Useful Tools</p><ol><li>IDA PRO</li><li><p>GDB</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">usage: gdb -q ./a.out</span><br><span class="line">            run(r)--运行</span><br><span class="line">            disas function_name--反编译某个function</span><br><span class="line">            break(b) *0x80488014--设置断点</span><br><span class="line">            info b--查看断点</span><br><span class="line">            info r--查看寄存器状态</span><br><span class="line">            ni--next instruction</span><br><span class="line">            si--step into</span><br><span class="line">            backtrace(bt)--显示上一层所有stack frame信息</span><br><span class="line">            continue(c)--继续执行到下一个断点</span><br><span class="line">            x/wx address--查看address中的内容</span><br><span class="line">w可以换成b/h/g分别对应1/2/8 Byte</span><br><span class="line">/后可以接数字，表示一次列出几个</span><br><span class="line">第二个x可以换成u/d/s/i 以不同方式表示</span><br><span class="line">u：unsigned int</span><br><span class="line">d：10进制</span><br><span class="line">s：字符串</span><br><span class="line">i：指令</span><br><span class="line">            set *address = value</span><br><span class="line">将address中的值设置为value，一次设4byte</span><br><span class="line">可以将*换成（char/short/long）分别表示 1/2/8 byte</span><br><span class="line">eg:</span><br><span class="line">set *0x8048a060 = 0xdeadbeef</span><br><span class="line">set &#123;int&#125;0x8048a060 = 1337</span><br><span class="line">set $eax = $edx(寄存器间)</span><br><span class="line">            list--列出源代码</span><br><span class="line">            print val--打印变量值</span><br><span class="line">            info local--显示局部变量</span><br><span class="line">            attach pid--附近加一个正在运行的程序</span><br><span class="line">            可以配合ncat或socat进行exploit的调试</span><br><span class="line">ncat -ve ./a.out -kl 8888</span><br><span class="line">echo 0 &gt; /proc/sys/kernel/yama/ptrace_scope</span><br><span class="line">elfsymbol--查看function的plt，做ROP时特别有用</span><br><span class="line">vmmap--查看process mapping信息，可以看到每个address的权限</span><br><span class="line">readelf--查看section位置</span><br><span class="line">find(alias searchmem)--在内存中查找信息，通常用来搜索字符串（例如：/bin/sh）</span><br></pre></td></tr></table></figure></li><li><p>Qira</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usage: qira -s ./filename</span><br></pre></td></tr></table></figure></li><li><p>Pwntools</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Basic structure :</span><br><span class="line">from pwn import *</span><br><span class="line">r = remote(&apos;127.0.0.1&apos;,4000)  //地址可变，也可以直接是程序名</span><br><span class="line">r.sendline(...)               //传入程序的内容，若传入地址，需写成如：p32(0x111)格式</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="Shellcode"><a href="#Shellcode" class="headerlink" title="Shellcode"></a>Shellcode</h1><p><strong>·System Call</strong><br>   通过汇编程序来执行系统的命令<br>   EAX: system call number/ return value<br>   EBX,ECX,EDX,ESI,EDI: argument<br>   Instruction: int 0x80<br>   System Call查看网址（Linux）：<a href="http://syscalls.kernelgork.com/" target="_blank" rel="noopener">http://syscalls.kernelgork.com/</a><br>   Example: execve(“/bin/sh”,NULL,NULL)<br>    <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x86 Assembly</span><br><span class="line">//该程序实现了execve(<span class="string">"/bin/sh"</span>,NULL,NULL)//</span><br><span class="line"><span class="keyword">push</span> <span class="number">0x0068732f</span></span><br><span class="line"><span class="keyword">push</span> <span class="number">0x6e69622f</span></span><br><span class="line"><span class="keyword">mov</span> ebx,esp</span><br><span class="line"><span class="keyword">mov</span> eax <span class="number">0xb</span></span><br><span class="line"><span class="keyword">mov</span> ecx <span class="number">0x0</span>     //xor ecx,ecx</span><br><span class="line"><span class="keyword">mov</span> edx,<span class="number">0x0</span>     //xor edx,edx</span><br><span class="line">int <span class="number">0x80</span></span><br><span class="line">//但该程序不是常用的写法，只做试例//</span><br></pre></td></tr></table></figure></p><pre><code><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//下面是一个常见的写法//</span><br><span class="line"><span class="keyword">jmp</span> sh</span><br><span class="line"><span class="symbol">run:</span></span><br><span class="line">  <span class="keyword">pop</span> ebx</span><br><span class="line">  <span class="keyword">mov</span> BYTE [ebx+<span class="number">7</span>],<span class="number">0</span> //将内存中“/bin/sh”后面一个内存单元设置为<span class="number">0</span>，作为作为该字符串的结束标志</span><br><span class="line">  xor eax,eax</span><br><span class="line">  <span class="keyword">mov</span> al,<span class="number">11</span></span><br><span class="line">  xor ecx,ecx</span><br><span class="line">  xor edx,edx</span><br><span class="line">  int <span class="number">0x80</span></span><br><span class="line"><span class="symbol">sh:</span></span><br><span class="line">  <span class="keyword">call</span> run</span><br><span class="line">  db <span class="string">"/bin/sh"</span></span><br></pre></td></tr></table></figure></code></pre><p>   使该汇编程序在c中调用<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先编译上面的汇编程序</span></span><br><span class="line">·nasm a.<span class="keyword">asm</span> -o a.o -felf32</span><br><span class="line"><span class="comment">//将a.o转化为16进制文件</span></span><br><span class="line">·objcopy -O binary a.o code</span><br><span class="line">·xxd -i code</span><br><span class="line">·xxd -i code &gt; code.h        <span class="comment">//转化为头文件</span></span><br><span class="line"><span class="comment">//编写和运行C文件</span></span><br><span class="line">·<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"code.h"</span></span></span><br><span class="line"> <span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*CODE)</span><span class="params">()</span></span>;      <span class="comment">//定义一个返回值为int，不带参数的函数指针</span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> ((CODE)code)();</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//编译</span></span><br><span class="line">·gcc test.c -o test -m32 -zexecstack</span><br><span class="line"><span class="comment">//再编写一个程序vul.c，编译一下</span></span><br><span class="line">·<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"> <span class="keyword">char</span> code[<span class="number">200</span>];</span><br><span class="line"> <span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*CODE)</span><span class="params">()</span></span>;</span><br><span class="line">  </span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">        read(<span class="number">0</span>,code,<span class="number">100</span>);</span><br><span class="line">        ((CODE)code)();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//将scode的输出作为输入传给vul</span></span><br><span class="line">·(cat scode;cat) | ./vul</span><br></pre></td></tr></table></figure></p><p>   在很多时候我们不能直接拿到shell，尤其是在做CTF的时候，Flag会保存在一个文件中，那么此时我们需要：<br>   Open这个文件<br>   Read这个文件<br>   Write这个文件<br>   <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//写一个OWR的汇编程序（参照上例）</span><br><span class="line"> <span class="keyword">jmp</span> file </span><br><span class="line"> open:</span><br><span class="line"> <span class="keyword">pop</span> ebx</span><br><span class="line"> xor eax,eax</span><br><span class="line"> <span class="keyword">mov</span> al,<span class="number">5</span>           //open操作</span><br><span class="line"> xor ecx,ecx</span><br><span class="line"> int <span class="number">0x80</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">mov</span> ebx,eax</span><br><span class="line"> <span class="keyword">mov</span> al,<span class="number">3</span>           //read操作</span><br><span class="line"> <span class="keyword">mov</span> ecx,esp</span><br><span class="line"> <span class="keyword">mov</span> dl,<span class="number">0x30</span></span><br><span class="line"> int <span class="number">0x80</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">mov</span> al,<span class="number">4</span>           //write操作</span><br><span class="line"> <span class="keyword">mov</span> bl,<span class="number">1</span></span><br><span class="line"> <span class="keyword">mov</span> dl,<span class="number">0x30</span></span><br><span class="line"> int <span class="number">0x80</span></span><br><span class="line"></span><br><span class="line"> xor eax,eax</span><br><span class="line"> <span class="keyword">inc</span> eax            //exit操作</span><br><span class="line"> int <span class="number">0x80</span></span><br><span class="line"></span><br><span class="line"> file:</span><br><span class="line"> <span class="keyword">call</span> open</span><br><span class="line"> db '/etc/passwd',0x0</span><br></pre></td></tr></table></figure></p><p>   然后参照上例操作</p><hr><h1 id="Stack-Overflow"><a href="#Stack-Overflow" class="headerlink" title="Stack Overflow"></a>Stack Overflow</h1><p>·又称stack smashing<br>·利用方式简单，可直接覆盖return address和控制参数</p><p><strong>·Return to Text</strong><br>控制程序的返回地址到原本程序中的函数（代码）<br>1）例如程序中有类似function：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">system(&apos;/bin/sh&apos;)</span><br><span class="line">execve(&apos;/bin/sh&apos;,NULL,NULL)</span><br></pre></td></tr></table></figure></p><p>就可以通过地址直接跳转到function<br>2）如果数据段上是可执行并且位置固定的话，可以先在数据段上写入shellcode，然后再跳转到数据段上执行。</p><hr><h1 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h1><p>一种利用现有的程序片段组合出想要的功能的技巧<br>1）控制ROP行为的code是“Stack上排列的内容”<br>Gadget：一小段以ret结尾的code<br>ROP Chain：串联在一起的gadget，组合出需要的功能<br><img src="/2018/09/12/pwn/ROPchain.png"><br>Gadget执行完后，还可以继续return<br>只要在stack上按正确的顺序排列好每个gadget的address和对应的stack frame，就可以执行复杂的功能了<br>2）使用ROP的关键：<br>    查找gadget<br>    排列gadget<br>3）ROP类型：<br>    控制寄存器做syscall<br>    使用原有程序里的函数<br>    使用libc里的gadget或者函数（绕过ASLR）</p><h2 id="Protection"><a href="#Protection" class="headerlink" title="Protection"></a>Protection</h2><p>·一般pwn题会有保护措施如：ASLR,DEP,PIE,StackGuard</p><p><strong>·ASLR</strong><br>地址随机化<br>每次执行时，stack、heap、library位置都不一样<br>检查是否开启ASLR：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/sys/kernel/randomize_va_space</span><br></pre></td></tr></table></figure></p><p><strong>·DEP</strong><br>数据执行保护，又称NX<br>可写的不可以执行，可执行的不可写</p><p><strong>·PIE</strong><br>地址无关可执行文件<br>    gcc在默认情况下没有开启，编译时加上-fPIC-pie就可以开启<br>    没开启的情况下程序的data段以及code段会是固定的<br>    一旦开启之后data以及code也会跟着ASLR，因此前面说的ret2text/shellcode没有固定的位置可以跳，就变得困难很多。</p><p><strong>·Stack Guard</strong><br>编译器对stack overflow的一种保护机制<br>在函数被调用的时候，先在stack上放canary<br>函数返回前先检查这个值有没有被修改<br>可以有效地防止缓冲区溢出攻击<br><img src="/2018/09/12/pwn/stack.png"><br>如图我们可以看到，在栈中EBP上面有一个canary栈溢出保护，程序在执行返回地址时，会先检查canary的值是否变化，所以若是有栈溢出攻击就会被识别。<br>因此要绕过Stack Guard保护，可以先把Canary的值提取出来，在栈溢出攻击时保持canary的值不变，由此实现栈溢出</p><h3 id="DEP-NX"><a href="#DEP-NX" class="headerlink" title="DEP(NX)"></a>DEP(NX)</h3><p>1）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary ./filename       //查找文件中的‘pop eax(ebx)(ecx)(edx) ; ret’</span><br><span class="line">ROPgadget --binary filename --opcode cd80c3</span><br><span class="line">ROPgadget --binary rop  --only &apos;int&apos;</span><br><span class="line">cd80c3                              //int 0x80;ret</span><br><span class="line">ROPgadget --binary ./filename  --only &apos;pop|ret&apos; | grep &apos;eax&apos; //只查找‘pop eax ; ret’</span><br><span class="line">ROPgadget --binary rop  --string &apos;/bin/sh&apos;   //查找文件里是否有/bin/sh</span><br></pre></td></tr></table></figure></p><h1 id="留坑待填"><a href="#留坑待填" class="headerlink" title="留坑待填"></a>留坑待填</h1>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;pwn学习笔记&lt;/center&gt;
    
    </summary>
    
      <category term="pwn" scheme="http://askylin.top/categories/pwn/"/>
    
    
      <category term="assembly language" scheme="http://askylin.top/tags/assembly-language/"/>
    
      <category term="pwn" scheme="http://askylin.top/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Assembly language</title>
    <link href="http://askylin.top/2018/09/03/Assembly-language/"/>
    <id>http://askylin.top/2018/09/03/Assembly-language/</id>
    <published>2018-09-03T11:18:35.000Z</published>
    <updated>2019-02-10T15:10:37.202Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p><strong>·汇编语言的组成（3类指令）</strong></p><p>1）汇编指令：有对应的机器码。<br>2）伪指令：没有对应的机器码，由编译器执行。<br>3）其他符号：如+、-、*、/等，没有对应的机器码，由编译器执行。</p><p><strong>·CPU对存储器的读写</strong></p><p>与芯片进行3类信息的交互：<br>1）存储单元地址。<br>2）器件选择，读或写命令。<br>3）读或写的数据。</p><p><strong>·外部总线</strong></p><p>1）地址总线：N根地址线可以选找2的N次方个内存单元（一个内存单元1byte）。<br>2）数据总线：宽度为8k的总线一次能传送 k Btye的数据。<br>3）控制总线：宽度决定CPU对外部期间的控制能力。</p><p><strong>·存储器芯片</strong></p><p>1）随机存储（RAM）：可读可写，关机数据丢失。<br>2）只读存储（ROM）：只读，关机数据不丢失。</p><hr><h1 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h1><p><strong>·Registers Architecture(寄存器结构)</strong></p><style>table th:first-of-type {    width: 40px;}</style> <table><thead><tr><th>register</th><th style="text-align:center">Accumulator</th><th>Counter</th><th>Data</th><th>Base</th><th>Stack Pointer</th><th>Stack Base Pointer</th><th>Source</th><th>Destination</th></tr></thead><tbody><tr><td>64-bit</td><td style="text-align:center">RAX</td><td>RCX</td><td>RDX</td><td>RBX</td><td>RSP</td><td>RBP</td><td>RSI</td><td>RCI</td></tr><tr><td>32-bit</td><td style="text-align:center">EAX</td><td>ECX</td><td>EDX</td><td>EBX</td><td>ESP</td><td>EBP</td><td>ESI</td><td>EDI      </td></tr><tr><td>16-bit</td><td style="text-align:center">AX</td><td>CX</td><td>DX</td><td>BX</td><td>SP</td><td>BP</td><td>SI</td><td>DI</td></tr><tr><td> 8-bit</td><td style="text-align:center">AH/AL</td><td>CH/CL</td><td>DH/DL</td><td>BH/BL</td></tr></tbody></table><p><strong>·通用寄存器</strong></p><p>1）AX BX CX DX 这四个寄存器存放一般性数据。<br>2）这四个通用寄存器都可以分为两个八位寄存器使用（参见上表16-bit和8-bit）<br>   其中，低八位构成AL，高八位构成AH。</p><p><strong>·几条汇编指令</strong></p><p>1）汇编指令举例</p><style>table th:first-of-type {    width: 100px;}table th:nth-of-type(2) {    width: 100px;}</style> <table><thead><tr><th>汇编指令</th><th style="text-align:center">控制CPU完成的操作</th></tr></thead><tbody><tr><td>mov ax,18</td><td style="text-align:center">AX=18</td></tr><tr><td>mov ah,78</td><td style="text-align:center">AH=78</td></tr><tr><td>mov al,8</td><td style="text-align:center">AL=8</td></tr><tr><td>add ax,9</td><td style="text-align:center">AX+=9</td></tr><tr><td>mov ax,bx</td><td style="text-align:center">AX=BX</td></tr><tr><td>mov al,bh</td><td style="text-align:center">AL=BH</td></tr><tr><td>add ax,bx</td><td style="text-align:center">AX+=BX</td></tr><tr><td>add bh,al</td><td style="text-align:center">BH+=AL</td></tr></tbody></table><p>2）注意事项：<br>   16位寄存器中，若是数据值相加超过4位十六进制的数据，则只保存低四位的十六进制数据。<br>   当16位寄存器被用作两个八位寄存器时，若寄存器数据值超过两位十六进制的数据，则只保存低二位的十六进制数据（若是AL寄存器中数据超过内存，高位不是真的被CPU丢失）<br>   指令的两个操作对象的位数应该一致，而：<br>    <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> ax,bl</span><br><span class="line"><span class="keyword">mov</span> bh,ax</span><br><span class="line"><span class="keyword">mov</span> al,<span class="number">2000</span>（超出范围）</span><br><span class="line"><span class="keyword">add</span> al,<span class="number">100</span>H（超出范围）</span><br></pre></td></tr></table></figure></p><p>   都是错误的指令。</p><p><strong>·8086CPU给出物理地址的方法</strong></p><p>1）地址加法器采用<strong>物理地址 = 段地址x16 + 偏移地址</strong>的方法（地址数据用16进制表示）。<br>2）基础地址 = 段地址 x 16。<br>3）“段地址x16”实际上表示16进制数左移一位（即二进制数左移4位）。</p><p><strong>·段地址</strong></p><p>1）“段地址”划分来自CPU，不是内存本身分段。<br>2）CPU可以用不同的段地址和偏移地址形成同一个物理地址。<br>3）给定段地址，仅用偏移地址寻址最多可寻64KB个内存单元。</p><p><strong>·段寄存器</strong></p><p>1）8086CPU有四个段寄存器：CS、DS、SS、ES。<br>2）CS：代码段寄存器（段地址），IP：指令指针寄存器（偏移地址）。<br>3）<img src="/2018/09/03/Assembly-language/8086PC读取执行指令关键部件.png" title="8086PC读取和执行指令的相关部件"><br>4）8086CPU工作过程：<br>   从CS:IP之乡的内存单元读取指令，指令进入指令缓冲区；<br>   IP = IP + 所读取的指令长度，从而指向下一条指令；<br>   执行指令。重复以上过程。<br>5）CPU只认被CS:IP指向的内存单元的内容为指令。</p><p><strong>·修改CS、IP的指令</strong></p><p>1）同时修改CS、IP的内容：“jmp 段地址：偏移地址”；<br>2）只修改IP的内容：“jmp 某一合法寄存器”（用寄存器里的值修改IP，eg: jmp ax）。</p><hr><h1 id="寄存器（内存访问）"><a href="#寄存器（内存访问）" class="headerlink" title="寄存器（内存访问）"></a>寄存器（内存访问）</h1><p><strong>·DS和[address]</strong></p><p>1）DS段寄存器通常来存放要访问的数据的段地址。<br>2）“[]”表示ds中的数据为内存单元的段地址，“[address]”中的“address”表示偏移地址。<br>3）假设读取10000H单元的内容（字节型数据的传送）：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> bx,<span class="number">1000</span>H</span><br><span class="line"><span class="keyword">mov</span> ds,bx</span><br><span class="line"><span class="keyword">mov</span> al,[<span class="number">0</span>]（使用<span class="keyword">mov</span>指令将一个内存单元中的(<span class="number">8</span>位)字节数据送入一个<span class="number">8</span>位寄存器中）</span><br><span class="line">ds是段寄存器，不能直接传入<span class="number">1000</span>H，只能用一个寄存器来进行中转。</span><br></pre></td></tr></table></figure></p><p>4）字的传送：<br>   eg:<br>   <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> bx,<span class="number">1000</span>H</span><br><span class="line"><span class="keyword">mov</span> ds,bx</span><br><span class="line"><span class="keyword">mov</span> ax,[<span class="number">0</span>]      <span class="comment">;1000：0处的(16位)字型数据送入ax</span></span><br><span class="line"><span class="keyword">mov</span> [<span class="number">0</span>],cx      <span class="comment">;将cx中的(16位)字数据传送到1000：0处</span></span><br></pre></td></tr></table></figure></p><p><strong>·mov、add、sub指令</strong></p><p>1）这三个指令都带有两个操作对象。<br>2）以mov为例，mov、add、sub指令可以有以下几种形式：<br>   <strong>mov 寄存器，数据<br>   mov 寄存器，寄存器<br>   mov 寄存器，内存单元<br>   mov 内存单元，寄存器</strong><br>4）但是mov还存在以下四种形式：<br>   mov 段寄存器，寄存器<br>   mov 寄存器，段寄存器<br>   mov 内存单元，段寄存器<br>   mov 段寄存器，内存单元<br>5）add，sub指令不能对段寄存器进行操作。</p><p><strong>·栈</strong></p><p>1）栈是一种具有特殊访问方式的存储空间：最后进入这个空间的数据，最先出去（LIFO）。<br>2）入栈（push）和出栈（pop）都是以字为单位进行的。<br>3）<img src="/2018/09/03/Assembly-language/push和pop.png"><br>4）段寄存器SS：存放栈顶的段地址；寄存器SP：存放栈顶的偏移地址；<strong>任意时刻，SS:SP指向栈顶元素</strong>。<br>5）栈空，SS:SP指向栈空间最高地址单元的下一个单元。<br>6）一个数据出栈后，该地址单元的数据依然存在，只是不在栈中，当下次有数据入栈时，它将被覆盖。<br>7）8086CPU不保证对栈操作是否超界，栈顶超界将会覆盖栈外数据。</p><p><strong>·push和pop指令</strong></p><p>1）push指令和pop指令格式有如下形式（以push为例）：<br>   push 寄存器<br>   push 段寄存器<br>   push 内存单元<br>2）push指令执行步骤：（1）SP=SP-2；（2）向SS:SP指向的字单元送入数据。<br>3）pop指令执行步骤：（1）从SS:SP指向的字单元读取数据（2）SP=SP+2。<br>4）push和pop指令中修改的只是SP，所以栈顶的变化范围最大为：0-FFFFH。</p><p><strong>·段的综述</strong></p><p>1）将一段连续的内存定义为一个段，用段地址指示段，偏移地址访问段内单元，数据段、代码段、栈段都是我们自己定义的。<br>2）数据段：段地址存放在DS中，用mov,add,sub等访问内存单元的指令时，CPU数据段的内容当作数据访问。<br>3）代码段：段地址存放在CS中，段中第一条指令的偏移地址放在IP中，CPU就执行代码段中的指令。<br>4）栈段：段地址存放在SS中，栈顶单元的偏移地址放在SP中，CPU执行栈操作时将我们定义的栈段当作占空间来用。<br>5）同一段内存，同时可以是代码段、栈段和数据段，也可以什么都不是，关键在于CS、IP、SS、SP、DS的指向。</p><hr><h1 id="初识汇编程序"><a href="#初识汇编程序" class="headerlink" title="初识汇编程序"></a>初识汇编程序</h1><p><strong>·3个伪指令</strong></p><p>1）segment和ends伪指令：这是一对成对使用的伪指令，作用是定义一个段，其格式为：<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">段名 segment    ；段从此处开始</span><br><span class="line">    :</span><br><span class="line">段名 ends       ；段到此处结束</span><br></pre></td></tr></table></figure></p><p>2）程序是由多个段组成的，指令、数据、栈被划分到了不同的段中。<br>3）end：汇编程序结束标记。<br>4）assume：假设某一段寄存器和程序中的某一个用segment…ends定义的段相关联，例如：<br>   assume cs: 代码段的名字 将一个代码段和CS寄存器联系起来。</p><p><strong>·程序返回</strong></p><p>1）指令：<br>   mov ax,4c00H<br>   int 21H</p><hr><h1 id="BX-和loop指令"><a href="#BX-和loop指令" class="headerlink" title="[BX]和loop指令"></a>[BX]和loop指令</h1><p><strong>·约定两个符号</strong></p><p>1）“（ ）”：表示一个寄存器或者内存单元里的内容。<br>2）“idata”：表示常量。</p><p><strong>·[BX]</strong></p><p>1）同[0]一样，[bx]也表示一个内存单元，只是它的偏移地址在bx中。<br>2）bx中存放的数据作为一个偏移地址EA，段地址SA默认在ds中。</p><p><strong>·Loop指令</strong></p><p>1）loop指令格式：loop 标号；<strong>通常</strong>用loop指令来实现循环功能，cx中存放循环次数。<br>2）eg:<br>   <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">mov</span> ax,<span class="number">2</span></span><br><span class="line">   <span class="keyword">mov</span> cx,<span class="number">11</span></span><br><span class="line"><span class="symbol">s:</span> <span class="keyword">add</span> ax,ax</span><br><span class="line">   loop s</span><br><span class="line">   <span class="keyword">mov</span> ax,<span class="number">4</span>c00h</span><br><span class="line">   int <span class="number">21</span>h</span><br></pre></td></tr></table></figure></p><p>3）标号代表一个地址，如上例s标识了一个地址，这个地址处有一条指令：add ax,ax.<br>4）CPU执行 loop s 的时候，进行两步操作：<br>   （1）（cx）=（cx）- 1<br>   （2）判断cx中的值，不为0则转至标号s所标识的地址处执行，如果为零则执行下一条指令。</p><p><strong>·汇编程序中的一些小变动</strong></p><p>1）用一个长度位1字节地内存单元向16位寄存器赋值（如把ffff:0006单元给ax赋值），则应该另令(ah)=0,(al)=(ffff6H)。<br>2）在汇编程序中，数据不能以字母开头，例如代码中mov ax,0ffffh，不能写成mov ax,ffffh。<br>3）汇编程序中，指令“mov ax,[0]”被当作“mov ax,0”处理，因此有如下两种方法实现将内存单元中的数据送入寄存器（举例说明）：<br>   <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> al,ds:[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">mov</span> al,[bx]</span><br><span class="line"><span class="keyword">mov</span> al,ds:[bx]</span><br></pre></td></tr></table></figure></p><p><strong>·段前缀</strong></p><p>1）出现在访问内存单元的指令中，用于显式地指明内存单元的段地址，形如“mov al,ds:[bx]”，在汇编语言中称为段前缀。<br>2）将一段内存单元的数据复制到另一段单元中，显式使用段前缀，可以提高程序效率。</p><hr><h1 id="包含多个段的程序"><a href="#包含多个段的程序" class="headerlink" title="包含多个段的程序"></a>包含多个段的程序</h1><p><strong>·在代码段中使用数据</strong></p><p>1）end的另一作用：指明编译器程序入口，用法：end 标号<br>2）在代码段中使用数据可以使用如下程序框架：<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">        :</span><br><span class="line">        :</span><br><span class="line">        数据</span><br><span class="line">        :</span><br><span class="line">        :</span><br><span class="line">start:</span><br><span class="line">        :</span><br><span class="line">        :</span><br><span class="line">        代码</span><br><span class="line">        :</span><br><span class="line">        :</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure></p><p>   来指明CPU从何处开始执行程序。</p><p><strong>·在代码段中使用栈</strong></p><p>1）在代码段中使用栈挥着数据实质上都是开辟空间。<br>2）在代码段中使用栈可以使用如下程序框架：<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">        :</span><br><span class="line">        :</span><br><span class="line">        数据</span><br><span class="line">        栈空间</span><br><span class="line">        :</span><br><span class="line">        :</span><br><span class="line">start:</span><br><span class="line">        :</span><br><span class="line">        :</span><br><span class="line">        代码</span><br><span class="line">        :</span><br><span class="line">        :</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure></p><p>   来指明CPU从何处开始执行程序。</p><p><strong>·将数据、代码、栈放入不同的段</strong></p><p>1）定义多个段。eg：<br>   <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br></pre></td></tr></table></figure></p><p>2）对段地址的引用：段名就相当于标号，它代表了段地址。eg:<br>   <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> ax,data <span class="comment">;将名称为“data”的段地址送入ax。</span></span><br></pre></td></tr></table></figure></p><p>3）<img src="/2018/09/03/Assembly-language/多个段举例.png" title="举例"></p><hr><h1 id="更灵活的定位内存地址的方法"><a href="#更灵活的定位内存地址的方法" class="headerlink" title="更灵活的定位内存地址的方法"></a>更灵活的定位内存地址的方法</h1><p><strong>·and和or指令</strong></p><p>1）and指令：逻辑与指令，按位进行与运算。该指令可以将操作对象的相应位设为0，其他位不变。<br>2）or指令：逻辑或指令，按位进行或运算。该指令可以将操作对象的相应位设为1，其他未不变。<br>3）eg:<br>   <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> al,<span class="number">01100011</span>B</span><br><span class="line"><span class="keyword">and</span> al,<span class="number">00111011</span>B    执行后al=<span class="number">00100011</span>B</span><br><span class="line"></span><br><span class="line"><span class="keyword">mov</span> al,<span class="number">01100011</span>B</span><br><span class="line"><span class="keyword">or</span>  al,<span class="number">00111011</span>B    执行后al=<span class="number">01111011</span>B</span><br></pre></td></tr></table></figure></p><p><strong>·以字符形式给出的数据</strong></p><p>1）用’……’的方式指明数据是以字符的形式给出的，编译器将其转化为ASCII码。<br>2）eg:<br>   <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db 'unIX'     ；相当于“db 75H,6EH,49H,58H”</span><br><span class="line"><span class="keyword">mov</span> al,<span class="string">'a'</span>    ；相当于“<span class="keyword">mov</span> al,<span class="number">61</span>H”</span><br></pre></td></tr></table></figure></p><p><strong>·大小写转换问题</strong></p><p>1）除了大写字母=小写字母-20H外，可以用and 11011111B将小写转换为大写字母。<br>2）可用or 01100000B将大写转换为小写字母。</p><p><strong>·[bx+idata]</strong></p><p>1）[bx+idata]表示一个偏移地址为(bx)+idata的内存单元。<br>2）常用格式：<br>   <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> ax,[bx+idata]</span><br><span class="line"><span class="keyword">mov</span> ax,[idata+bx]</span><br><span class="line"><span class="keyword">mov</span> ax,idata[bx]</span><br><span class="line"><span class="keyword">mov</span> ax,[bx].idata</span><br></pre></td></tr></table></figure></p><p>3）[bx+idata]的方式处理数组更加便利。与C语言比较：<br>   C语言：a[i],b[i]<br>   汇编语言：0[bx],5[bx]</p><p><strong>·SI和DI</strong></p><p>1）si和di是8086CPU中和bx功能相近的寄存器，si和di不能分成两个8位寄存器来使用。<br>2）复制字符串汇编程序举例：<br>   <img src="/2018/09/03/Assembly-language/sidi举例1.png"><br>   <img src="/2018/09/03/Assembly-language/sidi举例2.png"></p><p><strong>·[bx+si]和[bx+di]</strong></p><p>1）[bx+si]和[bx+di]含义相似，以[bx+si]为例，其表示一个偏移地址位(bx)+(si)的内存单元。</p><p><strong>·[bx+si+idata]和[bx+di+idata]</strong></p><p>1）[bx+si+idata]和[bx+di+idata]含义相似，以[bx+si+idata]为例，其表示一个偏移地址位(bx)+(si)+idata的内存单元。<br>2）常用格式：<br>   <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> ax,[bx+idata+si]</span><br><span class="line"><span class="keyword">mov</span> ax,[idata+bx+si]</span><br><span class="line"><span class="keyword">mov</span> ax,idata[bx][si]</span><br><span class="line"><span class="keyword">mov</span> ax,[bx].idata[si]</span><br><span class="line"><span class="keyword">mov</span> ax,[bx][si]<span class="number">.200</span></span><br></pre></td></tr></table></figure></p><hr><h1 id="数据的位置和长度"><a href="#数据的位置和长度" class="headerlink" title="数据的位置和长度"></a>数据的位置和长度</h1><p><strong>·约定两个描述性符号</strong></p><p>1）reg：寄存器<br>2）sreg：段寄存器</p><p><strong>·bx、si、di、bp</strong></p><p>1）在8086CPU中只有这四个寄存器可以用在“[…]”中来进行内存单元的寻址。<br>2）在“[…]”中，这四个寄存器可以单个出现，或只能以4种组合出现：bx和si、bx和di、bp和si、bp和di。<br>3）在“[…]”中使用寄存器bp，且指令中没有显性地给出段地址，则段地址默认在ss中。</p><p><strong>·寻址方式</strong></p><p>1）<img src="/2018/09/03/Assembly-language/寻址方式.png" title="寻址方式小结"></p><p><strong>·数据的长度</strong></p><p>1）通过寄存器名指明处理数据的尺寸。<br>   eg:<br>   <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> ax <span class="number">1</span>  <span class="comment">;字操作</span></span><br><span class="line">mox al,bl <span class="comment">;字节操作</span></span><br></pre></td></tr></table></figure></p><p>2）在没有寄存器名存在的情况下，用操作符X ptr指明内存单元的长度，X在汇编指令中可以为word或byte。<br>   eg:<br>   <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> word ptr ds:[<span class="number">0</span>],<span class="number">1</span>   <span class="comment">;指明指令访问的内存单元是一个字单元</span></span><br><span class="line"><span class="keyword">add</span> byte ptr [bx],<span class="number">2</span>     <span class="comment">;指明指令访问的内存单元是一个字节单元</span></span><br></pre></td></tr></table></figure></p><p><strong>·div指令</strong></p><p>1）div是除法指令。需要注意以下问题：<br>（1）除数：有8位和16位两种，在一个reg或内存单元中；<br>（2）被除数：默认放在AX或DX和AX中，除数为8位，被除数则为16位，默认在AX中存放；除数为16位，被除数则为32位，DX存放高16位，AX存放低16位。<br>（3）除数为8位，AL存储商，AH存储余数；除数为16位，AX存储商，DX存储余数。<br>2）格式：div reg或者div 内存单元。</p><p><strong>·伪指令db、dw、dd</strong></p><p>1）db: define btye<br>2）dw: define word<br>3）dd: define double word（双字型数据，占两个字）</p><p><strong>·dup</strong></p><p>1）dup操作符的作用：进行数据重复。<br>2）用法：<br>   db 3 dup (0)      ;定义了三个值都是0字节<br>   db 3 dup (0,1,2)  ;定义了九个字节，他们是0、1、2、0、1、2、0、1、2</p><hr><h1 id="转移指令的原理"><a href="#转移指令的原理" class="headerlink" title="转移指令的原理"></a>转移指令的原理</h1><p><strong>·转移指令</strong></p><p>1）可以修改IP，或同时修改CS、IP的指令统称为转移指令。即控制CPU执行内存中某处代码的指令。<br>2）段内转移：只修改IP，比如：jmp 1000:0。<br>3）段内转移分为短转移（IP的修改范围为-128~127）、近转移（IP的修改范围为-32768~32767）。<br>4）8086CPU的转移指令分为如下几类：<br>   无条件指令转移（如：jmp）<br>   条件转移指令<br>   循环指令（如：loop）<br>   过程<br>   中断</p><p><strong>·操作符offset</strong></p><p>1）offset是由编译器处理的符号，功能是取得标号的偏移地址。<br>2）<img src="/2018/09/03/Assembly-language/offset.png" title="offset用法"></p><p><strong>·依据位移指令进行转移的jmp指令</strong></p><p>1）jmp short 标号（段内短转移，转到标号处执行指令）实现功能是：(IP)=(IP)+8位位移。<br>2）CPU在执行jmp指令的时候并不需要转移目的地址，而是包含转移的位移。<br>3）<img src="/2018/09/03/Assembly-language/转移位移的计算方法.png" title="转移位移的计算方法"><br>4）jmp near ptr 标号（段内近转移）实现功能是：(IP)=(IP)+16位位移。</p><p><strong>·转移的目的地址在指令中的jmp指令</strong></p><p>1）“jmp far ptr 标号”实现段间转移，far ptr指明了指令用标号的段地址和偏移地址修改CS和IP。</p><p><strong>·转移地址在寄存器中的jmp指令</strong></p><p>1）指令格式：jmp 16位reg，功能：(IP)=(16位reg)。eg: jmp ax。</p><p><strong>·转移地址在内存中的jmp指令</strong></p><p>1）jmp word ptr 内存单元地址（段内转移）<br>   功能：从内存单元地址处开始存放一个字，是转移的目的偏移地址。eg：jmp word ptr ds:[0]<br>2）jmp dword ptr 内存单元地址（段间转移）<br>   功能：从内存单元地址处开始存放两个字，高地址处的字是转移的目的段地址，低地址处是转移的目的偏移地址。<br>   eg：jmp dword ptr ds:[0]</p><p><strong>·jcxz指令</strong></p><p>1）jcxz指令为有条件转移指令，所有的有条件转移指令都是短转移。<br>2）“jcxz 标号”的功能相当于：if((cx)==0) jmp short 标号。（判断语句）</p><p><strong>·loop指令</strong></p><p>1）所有的循环指令都是短转移。<br>2）“loop 标号”的功能相当于：(cx)–; if((cx)!=0) jmp short 标号（do while循环）</p><p><strong>·注意</strong></p><p>1）在之前jmp指令中，“jmp 2000：0100”的转移指令，是在Debug中使用汇编指令，汇编编译器并不认识。</p><hr><h1 id="CALL和RET指令"><a href="#CALL和RET指令" class="headerlink" title="CALL和RET指令"></a>CALL和RET指令</h1><p><strong>·ret和retf</strong></p><p>1）ret指令用栈中的数据，修改IP的内容，实现近转移；ret指令实现下面两步操作：<br>    <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(IP)=((ss)*<span class="number">16</span>+(sp))</span><br><span class="line">(sp)=(sp)+<span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>   相当于进行：pop IP</p><p>2）retf指令用栈中的数据，修改CS和IP的内容，实现远转移；retf指令实现4步操作：<br>    <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(IP)=((ss)*<span class="number">16</span>+(sp))</span><br><span class="line">(sp)=(sp)+<span class="number">2</span></span><br><span class="line">(CS)=((ss)*<span class="number">16</span>+(sp))</span><br><span class="line">(sp)=(sp)+<span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>   相当于进行：pop IP pop CS</p><p><strong>·call指令</strong></p><p>1）执行call指令时，先将当前IP或CS和IP压入栈中，再进行转移。<br>2）call指令不能实现短转移。</p><p><strong>·根据位移进行转移的call指令</strong></p><p>1）call 标号（将当前的IP压栈后，转到标号处执行指令）。<br>2）CPU执行“call 标号”时，相当于进行：<br>   <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">push</span> IP</span><br><span class="line"><span class="keyword">jmp</span> near ptr 标号</span><br></pre></td></tr></table></figure></p><p><strong>·转移的目的地址在指令中的call指令</strong></p><p>1）call far ptr 标号（实现段间转移）。<br>2）CPU执行“call far ptr 标号”时，相当于进行：<br>   <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">push</span> CS</span><br><span class="line"><span class="keyword">push</span> IP</span><br><span class="line"><span class="keyword">jmp</span> far ptr 标号</span><br></pre></td></tr></table></figure></p><p><strong>·转移地址在寄存器中的call指令</strong></p><p>1）call 16位reg。<br>2）CPU执行“call 16位reg”时，相当于进行：<br>   <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">push</span> IP</span><br><span class="line"><span class="keyword">jmp</span> <span class="number">16</span>位reg</span><br></pre></td></tr></table></figure></p><p><strong>·转移地址在内存中的call指令</strong></p><p>1）call word ptr 内存单元地址<br>2）CPU执行“call word ptr 内存单元地址”时，相当于进行：<br>   push IP<br>   jmp word ptr 内存单元地址<br>3）call dword ptr 内存单元地址<br>4）CPU执行“call dword ptr 内存单元地址”时，相当于进行：<br>   <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">push</span> CS</span><br><span class="line"><span class="keyword">push</span> IP</span><br><span class="line"><span class="keyword">jmp</span> dword ptr 内存单元地址</span><br></pre></td></tr></table></figure></p><p><strong>·call和ret配合使用</strong></p><p>1）实现子程序（函数）的机制，框架如下：<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">标号：</span><br><span class="line">   指令</span><br><span class="line">   ret</span><br></pre></td></tr></table></figure></p><p>2）当往子程序（函数）传参时，常用的方法是用栈传递参数；传字符串时，将首地址存放在寄存器中传递给子程序。<br>3）在子程序（函数）中用到相同的寄存器时，一般把子程序中的寄存器中的值在子程序开始时存入栈中，在子程序返回前把值出栈给相应寄存器。</p><p><strong>·mul指令</strong></p><p>1）mul乘法指令，需要注意以下两点：<br>（1）相乘的两个数位必须一样（8位和8位相乘），如果是8位，一个默认在AL存放，另一个存放在8位reg或内存字节单元中；如果是16位，一个默认存在AX中，另一个放在16位reg或内存字单元中。<br>（2）结果：如果是8位乘法，结果默认放在AX中；如果是16位乘法，结果高位默认存放在DX中，低位在AX中存放。<br>2）格式：mul reg；mul 内存单元（内存单元可以用不同的寻址方式给出）。<br>   eg：<br>   <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> ax,<span class="number">1000</span></span><br><span class="line"><span class="keyword">mov</span> bx,<span class="number">10000</span></span><br><span class="line"><span class="keyword">mul</span> bx</span><br></pre></td></tr></table></figure></p><hr><h1 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h1><p><strong>·概述</strong></p><p>1）作用：<br>   用来存储相关指令的某些执行结果；<br>   用来为CPU执行相关指令提供行为依据；<br>   用来控制CPU的相关指令工作方式；<br>2）标志寄存器（flag寄存器）按位起作用：<br><img src="/2018/09/03/Assembly-language/flag各位.png" title="flag寄存器各位示意图"><br>3）flag中空位没有使用。</p><p><strong>·ZF标志</strong></p><p>1）ZF，零标志位。它记录相关指令执行后结果是否为零。结果为零，zf=1；反之，zf=0。<br>2）在8086CPU中一般运算指令如add、sub、and等的执行会影响标志寄存器，而传送寄存器如mov、push、pop大都对标志寄存器没有影响。</p><p><strong>·PF标志</strong></p><p>1）PF，奇偶标志位。它记录相关指令执行后结果所有bit位中1的个数是否为偶数。偶数pf=1；反之pf=0。</p><p><strong>·SF标志</strong></p><p>1）SF，符号标志位。它记录相关指令执行后记过是否为负。结果为负，sf=1；反之，sf=0。<br>2）当我们把数据当作有符号数来运算时，可以通过sf判断结果正负；若把数据当作无符号数来运算，sf的值没有意义，虽然相关指令影响了它的值。</p><p><strong>·CF标志</strong></p><p>1）CF，进位标志位。在进行<strong>无符号</strong>数运算时，它记录运算结果的最高有效位向更高位的进位值，或从更高位的借位值。进位或借位cf=1。<br>2）eg：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> al,<span class="number">98</span>H</span><br><span class="line"><span class="keyword">add</span> al,al    <span class="comment">;执行后：(al)=30H,CF=1,CF记录了从最高有效位向更高位的进位值。</span></span><br><span class="line"><span class="keyword">mov</span> al,<span class="number">97</span>H</span><br><span class="line"><span class="keyword">sub</span> al,<span class="number">98</span>H   <span class="comment">;执行后：(al)=FFH,CF=1,CF记录了向更高位的借位值。</span></span><br></pre></td></tr></table></figure></p><p><strong>·OF标志</strong></p><p>1）OF，溢出标志位。记录<strong>有符号</strong>数运算结果是否发生了溢出。如果溢出，of=1；反之，of=0。</p><p><strong>adc指令</strong></p><p>1）adc是带进位加法指令，它利用了CF位上的进位值。<br>2）指令格式：adc 操作对象1，操作对象2<br>3）功能：操作对象1 = 操作对象1 + 操作对象2 + CF<br>   eg:<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adc ax,bx实现：(ax)=(ax)+(bx)+CF</span><br></pre></td></tr></table></figure></p><p>   相当于：低位相加，高位相加再加上低位相加产生的进位值。<br>4）adc指令执行后也可能产生进位值。</p><p><strong>·sbb指令</strong></p><p>1）sbb是带借位减法指令，它利用了CF位上的进位值。<br>2）指令格式：sbb 操作对象1，操作对象2<br>3）功能：操作对象1 = 操作对象1 - 操作对象2 - CF<br>   eg:<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbb ax,bx实现：(ax)=(ax)-(bx)-CF</span><br></pre></td></tr></table></figure></p><p><strong>·cmp指令</strong></p><p>1）cmp是比较指令，功能相当于减法指令，但是不保存结果。<br>2）格式：cmp 操作对象1，操作对象2<br>3）cmp指令可以对无符号数间和有符号数间进行比较。<br>4）以cmp ah,bh为例，总结CPU在执行cmp指令后，sf和of的值是如何说明比较结果的：<br>（1）如果sf=1，而of=0；所以(ah)&lt;(bh)。<br>（2）如果sf=1，而of=1；所以(ah)&gt;(bh)。<br>（3）如果sf=0，而of=1；所以(ah)&lt;(bh)。<br>（4）如果sf=0，而of=0；所以(ah)&gt;=(bh)。</p><p><strong>·检测比较结果的条件转移指令</strong></p><p>1）无符号数（检测zf，cf的值）：<br><img src="/2018/09/03/Assembly-language/无符号.png" title="常用的根据无符号数的比较结果进行转移的条件指令"><br>2）将cmp和je等指令配合使用，与高级语言中的if语句相似。<br>   eg:<br>   <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cmp ah,bh</span><br><span class="line">je s</span><br><span class="line"><span class="keyword">add</span> ah,bh</span><br><span class="line"><span class="keyword">jmp</span> short ok</span><br><span class="line"><span class="symbol">s:</span><span class="keyword">add</span> ah,ah</span><br><span class="line"><span class="symbol">ok:</span>...</span><br></pre></td></tr></table></figure></p><p><strong>·DF标志和传送指令</strong></p><p>1）DF，方向标志位。在串处理指令中，控制每次操作后si，di的增减。（df=0，每次操作后si、di递增；df=1，每次操作后si、di递减）。<br>2）一个串传送指令格式：<br>   movsb（传送内存单元中的字节到es:di，然后根据标志寄存器df位的值，将si、di递增或递减）<br>   movsw（传送内存单元中的字到es:di，然后根据标志寄存器df位的值，将si、di递增2或递减2）<br>3）配合rep使用（rep，根据cx值重复执行后面的串传送指令。）rep movsb可以循环实现(cx)个字符的传送。<br>4）8086CPU提供两个指令对df位进行修改：<br>   cld指令：将df位置0<br>   std指令：将df位置1</p><p><strong>·pushf和popf</strong></p><p>1）pushf：将标志寄存器的值压栈；popf：从栈中弹出数据，送入标志寄存器中。</p><p><strong>·标志寄存器在Debug</strong>中的表示</p><p>1）<img src="/2018/09/03/Assembly-language/debug.png" title="Debug中标志位的表示"></p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;初学汇编语言的笔记，方便日后深入学习。该博客知识来自《汇编语言》王爽&lt;/center&gt;
    
    </summary>
    
      <category term="Language" scheme="http://askylin.top/categories/Language/"/>
    
    
      <category term="assembly language" scheme="http://askylin.top/tags/assembly-language/"/>
    
  </entry>
  
</feed>
